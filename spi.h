// =================================================================================================
//                                              SPI_CR1
// =================================================================================================

// Побитовая структура Регистра управления SPI №1
typedef union DATA_SPI_CR1 {
    struct {
        /// Фаза CLK; 0: По первому фронту; 1: По второму фронту [rw]
        unsigned char CPHA : 1;
        // Полярность CLK; 0: Отсчет от низкого уровня(классика); 1: Отсчет от высокого уровня [rw]
        unsigned char CPOL : 1;
        // Выбор Master(1) / Slave(0) [rw]
        unsigned char MSTR : 1;
        // Baud Rate Control; Делитель частоты от fMASTER (до делителя CPU); Min 2 [rw]
        unsigned char BR : 3;
        // Включение(1) или Отключение(0) SPI [rw]
        unsigned char SPE : 1;
        // Выбор порядка передачи; Старший сначала — MSB (0); Младший сначала — LSB (1) [rw]
        unsigned char LSBFIRST : 1;
    };
    // Значение регистра как есть, чистый байт
    unsigned char RAW;
} DATA_SPI_CR1;
// Регистр управления SPI №1 (Включение, Такт, M/S, Порядок передачи)
#define SPI_CR1 ((DATA_SPI_CR1 *)0x5200)
/*
Значения делителя частоты для Baud Rate SPI
*/
#define BR_DIV2 ((unsigned char)0x0)
#define BR_DIV4 ((unsigned char)0x1)
#define BR_DIV8 ((unsigned char)0x2)
#define BR_DIV16 ((unsigned char)0x3)
#define BR_DIV32 ((unsigned char)0x4)
#define BR_DIV64 ((unsigned char)0x5)
#define BR_DIV128 ((unsigned char)0x6)
#define BR_DIV256 ((unsigned char)0x7)

// =================================================================================================
//                                              SPI_CR2
// =================================================================================================

// Побитовая структура Регистра упрfвления SPI №2
typedef union DATA_SPI_CR2 {
    struct {
        // Значение выдачи в NSS (SS) при включенном Software управлнеии (SSM = 1) [rw]
        unsigned char SSI : 1;
        // Включает Software управление подключенным уст-вами (SS) [rw]
        unsigned char SSM : 1;
        // Режим приема; 0: Прием и отправка; 1: Только прием [rw]
        unsigned char RXONLY : 1;
        unsigned char : 1;
        // Вкл. передачу CRC след. байтом. Ставится сразу после отправ послед байта + автосброс [rw]
        unsigned char CRCNEXT : 1;
        // Включает Hardware CRC Вычисление [rw]
        unsigned char CRCEN : 1;
        // Выбор направления в Бинаправленном режиме (BDM = 1); 0: Чтение; 1: Запись [rw]
        unsigned char BDOE : 1;
        // Включение Бинаправленного режима по 1 линии (по MOSI или MISO); Управляется BDOE [rw]
        unsigned char BDM : 1;
    };
    // Значение регистра как есть, чистый байт
    unsigned char RAW;
} DATA_SPI_CR2;
// Регистр управления SPI №2 (Управление SS, Режимы общения, CRC)
#define SPI_CR2 ((DATA_SPI_CR2 *)0x5201)

// =================================================================================================
//                                              SPI_ICR
// =================================================================================================

// Побитовая структура Регистра управления прерываниями SPI
typedef union DATA_SPI_ICR {
    struct {
        unsigned char : 4;
        // Разрешает прерывание по WakeUP событию (Приход такта в Halt'e) [rw] 
        unsigned char WKIE : 1;
        // Разрешает прерывание по Ошибке (CRCERR, OVR, MODF) [rw]
        unsigned char ERRIE : 1;
        // Разрешает прерывание по Приходу в буфер приема (Rx) [rw]
        unsigned char RXIE : 1;
        // Разрешает прерывание по Опустошению буфера отправки (Tx) [rw]
        unsigned char TXIE : 1;
    };
    // Значение регистра как есть, чистый байт
    unsigned char RAW;
} DATA_SPI_ICR;
// Регистр управления прерываниями SPI
#define SPI_ICR ((DATA_SPI_ICR *)0x5202)

// =================================================================================================
//                                              SPI_SR
// =================================================================================================

// Побитовая структура Регистра статуса SPI
typedef union DATA_SPI_SR {
    struct {
        // Флаг: Буфер приема (Rx) не пустой [r]
        unsigned char RXNE : 1;
        // Флаг: Буфер отправки (Tx) пуст [r]
        unsigned char TXE : 1;
        unsigned char : 1;
        // Флаг: Произошло WakeUP событие (Приход такта в Halt'e при этом SPI в Slave)
        unsigned char WKUP : 1;
        // Флаг: CRC значение на приеме не совпадает с рассчетным SPI_RXCRCR [rw0]
        unsigned char CRCERR : 1;
        // Флаг: Mode fault [rw0]
        unsigned char MODF : 1;
        // Случился Overrun – новые данные пришли, а RXNE не снят все еще
        unsigned char OVR : 1;
        // Флаг при занятости SPI (коммуникация) [r]
        unsigned char BSY : 1;
    };
    // Значение регистра как есть, чистый байт
    unsigned char RAW;
} DATA_SPI_SR;
// Регистр статуса SPI
#define SPI_SR ((DATA_SPI_SR *)0x5203)

// =================================================================================================
//                                              SPI_DR
// =================================================================================================
// Регистр данных (Общий для записи/чтения). Имеет два буфера для каждого случая.
// Когда нужно передать данные — записываем значение в SPI_DR (На деле в Tx буфер, он будет передан)
// Когда нужно прочитать данные — читаем из SPI_DR (На самом деле значение из Rx буфера)
// Операции чтения/записи из/в SPI_DR автоматические работают с флагами RXNE/TXE
// При прерывании, если сразу записать/прочитать там данные, то BSY не выключится (Скорость важна!)

// Регистр данных SPI (Общий для чтения/записи, т.к. имеет буферы Tx/Rx)
#define SPI_DR *((unsigned char *)0x5204)

// =================================================================================================
//                                            SPI_CRCPR
// =================================================================================================
// Значение полинома для вычисления CRC (Контрольной суммы). Стандартно CRC-7 (0x07)
// Используется при расчете Контрольной суммы (CRC) отдельно для Rx и Tx 
// Включение (CRCEN = 1) автоматически сбрасывает SPI_RXCRCR и SPI_TXCRCR
// Включение CRCNEXT передает SPI_TXCRCR после текущего передаваемого байта (Не учтет передачу CRC!)
// CRCNEXT автосбрасывается после передачи CRC
// Если приемный CRC не совпадает с расчетным -> CRCERR
// Проверка CRC на приемнике происходит после последнего принятого байта в серии

// Регистр значения полинома для вычисления CRC [rw]
#define SPI_CRCPR *((unsigned char *)0x5205)

// =================================================================================================
//                                            SPI_RXCRCR
// =================================================================================================
// Если CRC включено, то регистр хранит вычисленную CRC к.с. от ВХОДЯЩЕЙ последовательности
// Считывать его значение во время работы (BSY) нежелательно, там все меняется со скосротью большой
// Для расчетов используется SPI_CRCPR регистр

#define SPI_RXCRCR *((unsigned char *)0x5206)

// =================================================================================================
//                                            SPI_TXCRCR
// =================================================================================================
// Если CRC включено, то регистр хранит вычесленную CRC к.с. от ИСХОДЯЩЕЙ последовательности
// Считывать его значение во время работы (BSY) нежелательно, там все меняется со скосротью большой
// Для расчетов используется SPI_CRCPR регистр

#define SPI_TXCRCR *((unsigned char *)0x5207)